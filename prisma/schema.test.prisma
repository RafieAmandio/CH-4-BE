// Test-specific Prisma schema file using SQLite
// This schema is used for testing to avoid conflicts with PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id            String    @id @default(cuid())
  auth          Providers @default(EMAIL)
  email         String    @unique
  password_hash String?
  username      String?    @unique
  name          String
  nickname      String?
  photo_link    String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relationships
  events Event[]

  // Indexes
  @@index([email])
  @@index([username])
  @@index([is_active])
  @@map("user")
}

// Events
model Event {
  id               String      @id @default(cuid())
  created_by       String
  name             String
  detail           String?
  photo_link       String?
  location_name    String?
  location_address String?
  location_link    String?
  latitude         Decimal?
  longitude        Decimal?
  status           EventStatus @default(DRAFT)
  start            DateTime
  end              DateTime
  link             String?
  code             String?     @unique
  is_active        Boolean     @default(true)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  max_participants     Int?    
  current_participants Int     @default(0) 

  // Relationships
  creator User @relation(fields: [created_by], references: [id], onDelete: Cascade)

  // Indexes
  @@index([created_by])
  @@index([status])
  @@index([start])
  @@index([end])
  @@index([is_active])
  @@index([created_by, is_active])
  @@index([status, is_active])
  @@index([start, end])
  @@map("event")
}

// Enums
enum EventStatus {
  DRAFT
  ONGOING
  UPCOMING
  COMPLETED

  @@map("event_status")
}

enum Providers {
  APPLE
  LINKEDIN
  EMAIL

  @@map("providers")
}